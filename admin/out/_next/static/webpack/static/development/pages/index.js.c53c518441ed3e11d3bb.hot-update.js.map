{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.c53c518441ed3e11d3bb.hot-update.js","sources":["webpack:///./fetchers/targets.js"],"sourcesContent":["import httpFetch from '../fetch';\r\nimport config from '../config';\r\nimport { getInstalledCSRF } from '../setup';\r\n\r\nexport async function fetchTargets(setTargets, setErrorMessage) {\r\n  try {\r\n    const result = await httpFetch(config.apiPrefix + '/resources/targets.json');\r\n    if (result.ok) {\r\n      const targets = await result.json();\r\n      for (let i = 0; i < targets.length; ++i) {\r\n        const target = targets[i];\r\n        const split = target.url.split('://');\r\n        target.kind = split[0];\r\n        target.path = decodeURIComponent(split[1].substring(1));\r\n      }\r\n      setTargets(targets);\r\n    } else {\r\n      setErrorMessage('Completed fetch but got bad status from resource: ' + result.status);\r\n    }\r\n  } catch (err) {\r\n    setErrorMessage('Could not complete fetch: ' + err);\r\n  }\r\n}\r\n\r\nasync function fetchTargetOperation(operation, url, setErrorMessage) {\r\n  const apiURL = config.apiPrefix + '/resources/target/' + operation + '.json?url=' + encodeURIComponent(url);\r\n  var resp = null;\r\n  try {\r\n    resp = await httpFetch(apiURL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-CSRF-Token': getInstalledCSRF(),\r\n      },\r\n      credentials: 'include',\r\n    });\r\n    if (!resp.ok) {\r\n      try {\r\n        const errJson = await resp.json();\r\n        if (errJson.error) {\r\n          setErrorMessage(errJson.error);\r\n        } else {\r\n          setErrorMessage('Completed fetch but got error from resource: ' + errJson);\r\n        }\r\n      } catch (err) {\r\n        setErrorMessage('Completed fetch but got bad status from resource: ' + resp.status);\r\n      }\r\n      \r\n      return;\r\n    }\r\n  } catch (err) {\r\n    setErrorMessage('Could not complete fetch: ' + err);\r\n    return;\r\n  }\r\n  try {\r\n    const data = await resp.json();\r\n    return data;\r\n  } catch (err) {\r\n    setErrorMessage('Could not parse JSON: ' + err);\r\n  }\r\n}\r\n\r\nexport async function fetchTargetRemove(url, setErrorMessage) {\r\n  return fetchTargetOperation('remove', url, setErrorMessage);\r\n}\r\n\r\nexport async function fetchTargetAdd(url, setErrorMessage) {\r\n  return fetchTargetOperation('add', url, setErrorMessage);\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAXA;AAAA;AACA;AADA;AAaA;AACA;AAdA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAgBA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAoBA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AANA;AACA;AALA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAcA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AACA;AAtBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA2BA;AA3BA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AA+BA;AA/BA;AACA;AADA;AAAA;AAAA;AAkCA;AACA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAsCA;AAAA;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;A","sourceRoot":""}
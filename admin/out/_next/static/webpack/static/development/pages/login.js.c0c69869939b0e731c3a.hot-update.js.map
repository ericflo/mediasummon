{"version":3,"file":"static/webpack/static\\development\\pages\\login.js.c0c69869939b0e731c3a.hot-update.js","sources":["webpack:///./pages/login.js","webpack:///./setup.js"],"sourcesContent":["import '../node_modules/uikit/dist/css/uikit.min.css';\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { ensureInstalled, useRequiredUserConfig } from '../setup';\r\nimport Header from '../components/Header';\r\nimport { fetchLogin } from '../fetchers/login';\r\nimport { setAuthToken } from '../fetchers/common';\r\nimport Router from 'next/router';\r\nimport Navbar from '../components/Navbar';\r\n\r\nexport default function Login() {\r\n  const {userConfig} = useRequiredUserConfig();\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [usernameField, setUsernameField] = useState(null);\r\n  const [passwordField, setPasswordField] = useState(null);\r\n  useEffect(() => {\r\n    ensureInstalled(null);\r\n  }, []);\r\n  const loginCallback = useCallback(ev => {\r\n    ev.preventDefault();\r\n    async function cb() {\r\n      const username = usernameField.value;\r\n      const password = passwordField.value;\r\n      try {\r\n        const resp = await fetchLogin(username, password);\r\n        setAuthToken(resp.token);\r\n        Router.push('/');\r\n      } catch (err) {\r\n        setErrorMessage('' + err);\r\n      }\r\n    }\r\n    cb();\r\n  }, [usernameField, passwordField]);\r\n  const usernameLoaded = useCallback(ref => {\r\n    setUsernameField(ref);\r\n  }, []);\r\n  const passwordLoaded = useCallback(ref => {\r\n    setPasswordField(ref);\r\n  }, []);\r\n  return (\r\n    <div className=\"uk-container\">\r\n      <Navbar userConfig={userConfig} />\r\n      <Header title=\"Mediasummon\" />\r\n      {errorMessage ? \r\n        <div className=\"uk-alert-danger\" uk-alert=\"true\">\r\n          <a className=\"uk-alert-close\" uk-close=\"true\"></a>\r\n          <p><span uk-icon=\"warning\" /> {errorMessage}</p>\r\n        </div> : null}\r\n      <div className=\"uk-section uk-section-default uk-padding-remove-top\">\r\n        <h3>Login to Mediasummon</h3>\r\n        <form className=\"uk-form-stacked\" onSubmit={loginCallback}>\r\n          <div className=\"uk-margin\">\r\n            <label className=\"uk-form-label\">Username</label>\r\n            <div className=\"uk-form-controls\">\r\n              <input className=\"uk-input\" type=\"text\" placeholder=\"Username\" ref={usernameLoaded} />\r\n            </div>\r\n          </div>\r\n          <div className=\"uk-margin\">\r\n            <label className=\"uk-form-label\">Password</label>\r\n            <div className=\"uk-form-controls\">\r\n              <input className=\"uk-input\" type=\"password\" placeholder=\"\" ref={passwordLoaded} />\r\n            </div>\r\n          </div>\r\n          <input type=\"submit\" onSubmit={loginCallback} value=\"Login\" />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport config from './config';\r\nimport { loadAuthToken } from './fetchers/common';\r\nimport { fetchCurrentUserConfig } from './fetchers/userconfig';\r\n\r\nvar installed = false;\r\nvar installedCSRF = null;\r\n\r\nexport function ensureInstalled(token) {\r\n  if (installed) {\r\n    return;\r\n  }\r\n\r\n  // Load UIKit and tell it to use its 'Icons' plugin\r\n  const UIKit = require('uikit');\r\n  const Icons = require('uikit/dist/js/uikit-icons');\r\n  UIKit.use(Icons);\r\n\r\n  const dayjs = require('dayjs');\r\n  const relativetime = require('dayjs/plugin/relativeTime');\r\n  dayjs.extend(relativetime);\r\n\r\n  var req = new XMLHttpRequest();\r\n  req.addEventListener('load', function() {\r\n    installedCSRF = req.getResponseHeader('x-csrf-token');\r\n  });\r\n  req.open('GET', config.apiPrefix, true);\r\n  if (token) {\r\n    req.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n  }\r\n  req.send(null);\r\n\r\n  installed = true;\r\n}\r\n\r\nexport function getInstalledCSRF() {\r\n  return installedCSRF;\r\n}\r\n\r\nexport function useRequiredUserConfig() {\r\n  const [state, setState] = useState({userConfig: undefined, token: undefined});\r\n  useEffect(() => {\r\n    async function fetchConfig() {\r\n      try {\r\n        const token = await loadAuthToken();\r\n        const userConfig = await fetchCurrentUserConfig();\r\n        setState({userConfig, token});\r\n      } catch (err) {\r\n        Router.push('/login');\r\n      }\r\n    }\r\n    fetchConfig();\r\n  }, []);\r\n  return state;\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AASA;AACA;AACA;AACA;;;;A","sourceRoot":""}
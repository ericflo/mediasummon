{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.834bc22ecfa831945811.hot-update.js","sources":["webpack:///./fetchers/targets.js","webpack:///./fetchers/userconfig.js"],"sourcesContent":["import httpFetch from '../fetch';\r\nimport config from '../config';\r\nimport { getInstalledCSRF } from '../setup';\r\nimport { throwMessageFromJSONError, withAuthHeaders } from './common';\r\n\r\nexport async function fetchTargets() {\r\n  try {\r\n    const result = await httpFetch(config.apiPrefix + '/resources/targets.json', {\r\n      headers: withAuthHeaders({'Content-Type': 'application/json'}),\r\n    });\r\n    if (result.ok) {\r\n      const targets = await result.json();\r\n      for (let i = 0; i < targets.length; ++i) {\r\n        const target = targets[i];\r\n        const split = target.url.split('://');\r\n        target.kind = split[0];\r\n        target.path = decodeURIComponent(split[1].substring(1));\r\n      }\r\n      return targets\r\n    } else {\r\n      await throwMessageFromJSONError(result);\r\n    }\r\n  } catch (err) {\r\n    throw 'Could not complete fetch: ' + err;\r\n  }\r\n}\r\n\r\nasync function fetchTargetOperation(operation, url) {\r\n  const apiURL = config.apiPrefix + '/resources/target/' + operation + '.json?url=' + encodeURIComponent(url);\r\n  var resp = null;\r\n  try {\r\n    resp = await httpFetch(apiURL, {\r\n      method: 'POST',\r\n      headers: withAuthHeaders({\r\n        'Content-Type': 'application/json',\r\n        'X-CSRF-Token': getInstalledCSRF(),\r\n      }),\r\n      credentials: 'include',\r\n    });\r\n    if (!resp.ok) {\r\n      await throwMessageFromJSONError(resp);\r\n    }\r\n  } catch (err) {\r\n    throw 'Could not complete fetch: ' + err;\r\n  }\r\n  try {\r\n    return await resp.json();\r\n  } catch (err) {\r\n    throw 'Could not parse JSON: ' + err;\r\n  }\r\n}\r\n\r\nexport async function fetchTargetRemove(url) {\r\n  return fetchTargetOperation('remove', url);\r\n}\r\n\r\nexport async function fetchTargetAdd(url) {\r\n  return fetchTargetOperation('add', url);\r\n}","import httpFetch from '../fetch';\r\nimport { throwMessageFromJSONError, withAuthHeaders } from './common';\r\n\r\nexport async function fetchCurrentUserConfig() {\r\n  try {\r\n    const result = await httpFetch(config.apiPrefix + '/resources/config.json', {\r\n      headers: withAuthHeaders({'Content-Type': 'application/json'}),\r\n    });\r\n    if (result.ok) {\r\n      return await result.json();\r\n    } else {\r\n      await throwMessageFromJSONError(result);\r\n    }\r\n  } catch (err) {\r\n    throw 'Could not complete fetch: ' + err;\r\n  }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AADA;AACA;AAHA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAsBA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AANA;AACA;AALA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAyBA;AAAA;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AAEA;AAAA;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AADA;AACA;AAHA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;A","sourceRoot":""}